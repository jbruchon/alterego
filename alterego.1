.TH ALTEREGO 1 "17 Nov 2013"

.SH NAME
alterego \- Run a program in an alternative root transparently

.SH SYNOPSIS
\fBalterego\fP [\fIprogram\fP]

.SH DESCRIPTION
.B AlterEgo
is a program that allows seamless integration of userlands 
that can execute on the current machine, but are not compatible
to simply merge together. The most obvious example of this is 
running 32-bit programs on a "pure" 64-bit system.
.PP
AlterEgo automatically performs a chroot() call to a hard-coded directory 
and drops privileges to the current user ID when it is run. Because of this, 
\fIAlterEgo must be setuid root for normal user accounts to use it.\fP 
AlterEgo attempts to rewrite the program invocation to include the current 
working directory if any slashes exist in the program name. For example:
.TP
.PP
.B /usr/src$ ./program
.PP
will be executed in the chroot environment as
.TP
.PP
.B /usr/src/./program
.PP
Using AlterEgo is a relatively easy process. Let's say that we are running 
on an x86_64 (64-bit) system, and we have a functional i386 (32-bit) system 
unpacked into /i386 (with /dev and /proc and friends properly mounted) and
we've unpacked a Firefox program as /usr/lib/firefox:
.TP
.PP
.B /i386/usr/lib# tar -xpf /root/firefox-12.0-i386.tar.bz2
.PP
We've also made a symlink to run it with:
.TP
.PP
.B /i386/usr/bin# ln -s ../lib/firefox/firefox
.PP
If we were to "chroot /i386" and then type "firefox" we would be able to 
run Firefox within the 32-bit environment, but there are a few problems with 
that approach:
.PP
1. It's a lot to type just to run a program.
2. If you aren't root, you can't use chroot to do this anyway.
3. If you want to run a program in /i386 from a script, it must be rewritten 
   to use chroot, and must be run as root or with setuid root. (This is bad 
   for very obvious and ugly reasons.)
.PP
This is where AlterEgo comes in. Placing a copy of a natively compatible 
version of AlterEgo where the 32-bit application is under /i386 will cause 
AlterEgo to automatically perform the chroot magic when anyone tries to 
execute that program. In our example, we'll make a symlink for Firefox:
.TP
.PP
ln -s /usr/bin/alterego /usr/bin/firefox
.PP
And when someone attempts to run "firefox" in 64-bit world, AlterEgo will:
.PP
1. Change the working directory to /i386
2. Change the working root to /i386
3. Execute "firefox" with any arguments provided
.PP
There are some inherent limitations. The directory used is hard-coded 
at compile time, and cannot be modified. AlterEgo's drop-in "it just works"
functionality requires that no command-line options be interpreted, since 
it is assumed that these are targeted at the destination program.
.PP
.SH OPTIONS
.PP
An optional
.I program
parameter may be specified instead of using a link.
.PP
.SH COPYRIGHT
AlterEgo is Copyright (C) 2012-2018 by Jody Bruchon and is distributed
under the terms of the GNU General Public License Version 3.
.PP
.SH SEE ALSO
chroot(1)
.PP
.SH AUTHOR
Jody Lee Bruchon <jody@jodybruchon.com>
